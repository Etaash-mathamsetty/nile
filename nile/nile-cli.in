#!@PYTHON@

# nile.in
#
# Copyright 2022 Pawe≈Ç Lidwin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import signal
import locale
import gettext
import sys
import logging
import json
import gi

VERSION = "@VERSION@"
pkgdatadir = "@pkgdatadir@"
localedir = "@localedir@"

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
gi.require_version("WebKit2", "5.0")

from nile.arguments import get_arguments
from nile.downloading import manager
from nile.utils.config import Config
from nile.utils.launch import Launcher
from nile.utils.uninstall import Uninstaller
from nile.utils import download as dl_utils
from nile.api import authorization, session, library
from nile.models import manifest
from nile import constants, version, codename
from nile.main import Nile


class CLI:
    def __init__(
        self, session_manager, config_manager, logger, arguments, unknown_arguments
    ):
        self.config = config_manager
        self.session = session_manager
        self.library_manager = library.Library(self.config, self.session)
        self.auth_manager = authorization.AuthenticationManager(
            self.session, self.config, self.library_manager
        )
        self.arguments = arguments
        self.logger = logger
        self.unknown_arguments = unknown_arguments
        self.app = Nile()
        if self.auth_manager.is_logged_in() and self.auth_manager.is_token_expired():
            self.auth_manager.refresh_token()

    def handle_auth(self):
        if self.arguments.login:
            if not self.auth_manager.is_logged_in():
                url, handler = self.auth_manager.login()
                self.app.headless = True
                self.app.spawn_login = (True, url, handler)
                self.app.run()

                self.library_manager.sync()
                return True
            else:
                self.logger.error("You are already logged in")
                return False
        elif self.arguments.logout:
            self.auth_manager.logout()
            return False
        self.logger.error("Specify auth action, use --help")

    def sort_by_title(self, element):
        return (
            element["product"].get("title")
            if element["product"].get("title") is not None
            else ""
        )

    def handle_library(self):
        cmd = self.arguments.sub_command

        if cmd == "list":
            games_list = ""
            games = self.config.get("library")
            installed = self.config.get("installed")
            installed_dict = dict()
            if installed:
                for game in installed:
                    installed_dict[game["id"]] = game
            games.sort(key=self.sort_by_title)
            displayed_count = 0
            for game in games:
                if self.arguments.installed and not installed_dict.get(game["id"]):
                    continue
                genres = (
                    (f'GENRES: {game["product"]["productDetail"]["details"]["genres"]}')
                    if game["product"]["productDetail"]["details"].get("genres")
                    else ""
                )
                if not constants.SUPPORTS_COLORS:
                    games_list += f'{"(INSTALLED) " if installed_dict.get(game["product"]["id"]) and not self.arguments.installed else ""}{game["product"].get("title")} ID: {game["id"]} {genres}\n'
                else:
                    games_list += f'{constants.SHCOLORS["green"]}{"(INSTALLED) " if installed_dict.get(game["product"]["id"]) and not self.arguments.installed else ""}{constants.SHCOLORS["clear"]}{game["product"].get("title")} {constants.SHCOLORS["red"]}ID: {game["id"]}{constants.SHCOLORS["clear"]} {genres}\n'

                displayed_count += 1
            games_list += f"\n*** TOTAL {displayed_count} ***\n"
            print(games_list)

        elif cmd == "sync":
            if not self.auth_manager.is_logged_in():
                self.logger.error("User not logged in")
                sys.exit(1)
            self.library_manager.sync()

    def handle_install(self):
        games = self.config.get("library")
        games.sort(key=self.sort_by_title)
        matching_game = None
        for game in games:
            if game["id"] == self.arguments.id:
                matching_game = game
                break
        if not matching_game:
            self.logger.error("Couldn't find what you are looking for")
            return
        self.logger.info(f"Found: {matching_game['product']['title']}")
        self.download_manager = manager.DownloadManager(
            self.config, self.library_manager, self.session
        )
        comparison, game_location = self.download_manager.init_download(
            matching_game,
            force_verifying=bool(self.arguments.command == "verify"),
            base_install_path=self.arguments.base_path,
            install_path=self.arguments.exact_path,
        )
        if not comparison or not game_location:
            self.logger.error("There was an error downloading the game")

        patchmanifest = self.download_manager.get_patchmanifest(comparison)
        self.logger.debug(f"Number of files {len(patchmanifest.files)}")
        if len(patchmanifest.files) == 0:
            self.logger.info("Game is up to date")
            return
        total_size = sum(f.download_size for f in patchmanifest.files)
        readable_size = dl_utils.get_readable_size(total_size)
        self.logger.info(
            f"Download size: {round(readable_size[0],2)}{readable_size[1]}"
        )
        if not dl_utils.check_available_space(total_size, game_location):
            self.logger.error("Not enough space available")
            return
        self.download_manager.download_from_patchmanifest(game_location, patchmanifest)

        self.logger.info("Download complete")

    def list_updates(self):
        installed_array = self.config.get("installed")
        games = self.config.get("library")

        if not installed_array:
            self.logger.error("No games installed")
            return

        # Prepare array of game ids
        game_ids = dict()
        for game in games:
            for installed_game in installed_array:
                if game["id"] == installed_game["id"]:
                    game_ids.update({game["product"]["id"]: installed_game})
        self.logger.debug(
            f"Checking for updates for {list(game_ids.keys())}, count: {len(game_ids)}"
        )
        versions = self.library_manager.get_versions(list(game_ids.keys()))

        updateable = list()

        for version in versions:
            if version["versionId"] != game_ids[version["adgProductId"]]["version"]:
                updateable.append(version["adgProductId"])
        self.logger.debug(f"Updateable games: {updateable}")
        if self.arguments.json:
            print(json.dumps(updateable))
            return

        if len(updateable) == 0:
            self.logger.info("No updates available")
            return

        games.sort(key=self.sort_by_title)

        print("Games with updates:")
        for game in games:
            if game["product"]["id"] in updateable:
                print(game["product"]["title"])
        print(f"NUMBER OF GAMES: {len(updateable)}")

    def handle_launch(self):
        games = self.config.get("library")
        matching_game = None
        self.logger.info(f"Searching for {self.arguments.id}")
        for game in games:
            if game["id"] == self.arguments.id:
                matching_game = game
                break
        if not matching_game:
            self.logger.error("No game match")
            return
        self.logger.debug(f"Found {matching_game['product']['title']}")

        self.logger.debug(
            f"Checking if game {game['product']['title']} id: {matching_game['id']} is installed"
        )
        installed_games = self.config.get("installed")

        if not installed_games:
            self.logger.error("No game is installed")
            return

        found = None
        for installed_game in installed_games:
            if installed_game["id"] == matching_game["id"]:
                found = installed_game
                break

        if not found:
            self.logger.error("Game is not installed")
            return

        launcher = Launcher(self.config, self.arguments, self.unknown_arguments)

        launcher.start(found["path"])

    def handle_uninstall(self):
        uninstaller = Uninstaller(self.config, self.arguments)
        uninstaller.uninstall()


def main():
    (arguments, unknown_arguments), parser = get_arguments()
    if arguments.version:
        print(version, codename)
        return 0
    debug_mode = "-d" in unknown_arguments or "--debug" in unknown_arguments
    if debug_mode:
        if "-d" in unknown_arguments:
            unknown_arguments.remove("-d")
        elif "--debug" in unknown_arguments:
            unknown_arguments.remove("--debug")

    logging_level = logging.DEBUG if debug_mode else logging.INFO
    logging.basicConfig(
        level=logging_level, format="%(levelname)s [%(name)s]:\t %(message)s"
    )
    logger = logging.getLogger("CLI")

    config_manager = Config()
    session_manager = session.APIHandler()
    cli = CLI(session_manager, config_manager, logger, arguments, unknown_arguments)

    command = arguments.command

    if command == "auth":
        cli.handle_auth()

    elif command == "library":
        cli.handle_library()
    elif command in ["install", "verify", "update"]:
        cli.handle_install()
    elif command == "list-updates":
        cli.list_updates()
    elif command == "launch":
        cli.handle_launch()
    elif command == "uninstall":
        cli.handle_uninstall()
    else:
        print(
            "You didn't provide any argument, GUI will be there someday, for now here is help"
        )
        parser.print_help()

    return 0


if __name__ == "__main__":
    sys.exit(main())
